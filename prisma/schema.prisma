generator client {
  provider = "prisma-client-js"
  // Переконайтеся, що цей шлях правильний для вашої структури проекту
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Моделі для автентифікації через NextAuth.js з PrismaAdapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Оновлена модель користувача для Badoo-прототипу
model User {
  id            String    @id @default(cuid())
  name          String? // Ім'я (з Google або введене користувачем)
  email         String?   @unique
  emailVerified DateTime?
  image         String? // URL основного фото профілю

  // --- Оновлені та нові поля для профілю ---
  birthDate DateTime? // Дата народження (для розрахунку віку)
  gender    String? // Стать (можна зробити Enum пізніше)
  aboutMe   String?   @db.Text // Коротко про себе (замість bio)
  city      String? // Місто проживання

  // Зв'язки для NextAuth
  accounts Account[]
  sessions Session[]

  // --- Зв'язки для Чату ---
  // Чати, в яких користувач є учасником
  chats        ChatParticipant[]
  // Повідомлення, надіслані цим користувачем
  sentMessages Message[]         @relation("SentMessages")

  // Зв'язки для закладок
  bookmarksMade Bookmark[] @relation("BookmarkedBy") // Закладки, які зробив цей користувач
  bookmarkedFor Bookmark[] @relation("BookmarkedUser") // Закладки, де цього користувача додали
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// --- НОВІ МОДЕЛІ ДЛЯ ЧАТУ ---

// Модель для представлення чату/розмови
model Chat {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt // Оновлюється при новому повідомленні

  // Учасники цього чату (зв'язок багато-до-багатьох через ChatParticipant)
  participants ChatParticipant[]
  // Повідомлення в цьому чаті
  messages     Message[]
}

// Проміжна модель для зв'язку багато-до-багатьох між User та Chat
model ChatParticipant {
  id     String @id @default(cuid())
  userId String
  chatId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Нове поле для відстеження, коли користувач востаннє читав цей чат
  lastReadAt DateTime?

  @@unique([userId, chatId]) // Користувач може бути учасником чату тільки один раз
}

// Модель для представлення окремого повідомлення
model Message {
  id        String   @id @default(cuid())
  content   String   @db.Text // Вміст повідомлення
  createdAt DateTime @default(now())

  // Автор повідомлення
  authorId String
  author   User   @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade)

  // Чат, до якого належить повідомлення
  chatId String
  chat   Chat   @relation(fields: [chatId], references: [id], onDelete: Cascade)

  // Можна додати статус (наприклад, "прочитано"), якщо потрібно
  // isRead Boolean @default(false)
}

// --- НОВА МОДЕЛЬ ДЛЯ ЗАКЛАДОК ---
model Bookmark {
  id String @id @default(cuid())

  // Користувач, який зробив закладку
  bookmarkerId String
  bookmarker   User   @relation("BookmarkedBy", fields: [bookmarkerId], references: [id], onDelete: Cascade)

  // Користувач, якого додали в закладки
  bookmarkedUserId String
  bookmarkedUser   User   @relation("BookmarkedUser", fields: [bookmarkedUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  // Унікальна комбінація: один користувач може додати іншого в закладки тільки один раз
  @@unique([bookmarkerId, bookmarkedUserId])
}
