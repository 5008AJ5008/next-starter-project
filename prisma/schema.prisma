// Definiert den Prisma Client Generator und den Ausgabeort.
generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

// Definiert die Datenquelle und die Verbindungs-URLs zur PostgreSQL-Datenbank.
datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// Modell für Benutzerkonten, die von Authentifizierungsanbietern stammen (z.B. Google).
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

// Modell für Benutzersitzungen (Sessions).
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Modell, das einen Benutzer der Anwendung repräsentiert.
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  birthDate     DateTime?
  gender        String?
  aboutMe       String?   @db.Text
  city          String?

  accounts     Account[]
  sessions     Session[]
  chats        ChatParticipant[]
  sentMessages Message[]         @relation("SentMessages")

  bookmarksMade Bookmark[] @relation("BookmarkedBy")
  bookmarkedFor Bookmark[] @relation("BookmarkedUser")

  likesGiven    PhotoLike[] @relation("LikedBy")
  likesReceived PhotoLike[] @relation("PhotoLiked")
}

// Modell für Verifizierungstokens (z.B. für E-Mail-Bestätigung).
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Modell, das eine Chat-Konversation zwischen Benutzern repräsentiert.
model Chat {
  id           String            @id @default(cuid())
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  participants ChatParticipant[]
  messages     Message[]
}

// Zwischenmodell, das die Viele-zu-Viele-Beziehung zwischen User und Chat abbildet.
// Speichert auch, wann ein Benutzer einen Chat zuletzt gelesen hat.
model ChatParticipant {
  id         String    @id @default(cuid())
  userId     String
  chatId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  chat       Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  lastReadAt DateTime?

  @@unique([userId, chatId])
}

// Modell, das eine einzelne Nachricht innerhalb eines Chats repräsentiert.
model Message {
  id              String   @id @default(cuid())
  content         String   @db.Text
  createdAt       DateTime @default(now())
  authorId        String?
  author          User?    @relation("SentMessages", fields: [authorId], references: [id], onDelete: Cascade)
  chatId          String
  chat            Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  isSystemMessage Boolean? @default(false)
}

// Modell für Lesezeichen, die ein Benutzer für das Profil eines anderen Benutzers setzt.
model Bookmark {
  id               String   @id @default(cuid())
  bookmarkerId     String
  bookmarker       User     @relation("BookmarkedBy", fields: [bookmarkerId], references: [id], onDelete: Cascade)
  bookmarkedUserId String
  bookmarkedUser   User     @relation("BookmarkedUser", fields: [bookmarkedUserId], references: [id], onDelete: Cascade)
  createdAt        DateTime @default(now())

  @@unique([bookmarkerId, bookmarkedUserId])
}

// Modell für "Likes", die ein Benutzer für das Profil/Foto eines anderen Benutzers vergibt.
model PhotoLike {
  id          String   @id @default(cuid())
  likerId     String
  liker       User     @relation("LikedBy", fields: [likerId], references: [id], onDelete: Cascade)
  likedUserId String
  likedUser   User     @relation("PhotoLiked", fields: [likedUserId], references: [id], onDelete: Cascade)
  createdAt   DateTime @default(now())

  @@unique([likerId, likedUserId])
}
