// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Tabellenname PascalCase und Singular
model Signature {
  // ID, wenn man eine automatisch hochgezählte Integer-Zahl möchte.
  // Achtung, Gefahr, dass jemand einfach IDs ausprobiert.
  // Siehe auch https://www.youtube.com/watch?v=cEWlm-iXeF8
  //  id Int @id @default(autoincrement())
  id       String   @id @default(uuid()) // Kryptische Strings ohne Reihenfolge als ID
  name     String? // Optionale Spalte
  email    String   @unique // Einzigartiger Wert, Adresse darf nicht zweimal vorkommen
  approved Boolean  @default(false)
  date     DateTime @default(now()) // Zeitpunk der Erstellung des Eintrags
}

model Event {
  id          Int        @id @default(autoincrement())
  name        String
  description String?
  date        DateTime
  poster      Poster? // 1:1 Relation, muss hier (wo nicht @relation verwendet wird) optional sein
  // 1:n Relation, Event kann nur eine Venue haben
  venue       Venue      @relation(fields: [venueId], references: [id])
  venueId     Int
  category    Category[]
}

model Poster {
  id      Int    @id @default(autoincrement())
  url     String
  event   Event  @relation(fields: [eventId], references: [id]) // Angabe dient nur Prisma
  eventId Int    @unique // Feld taucht in der Datenbank auf
}

model Venue {
  id    Int     @id @default(autoincrement())
  name  String
  Event Event[] // 1:n Relation, Venue kann viele Events haben
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String
  event Event[]
}
