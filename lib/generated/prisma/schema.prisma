generator client {
  provider = "prisma-client-js"
  // Переконайтеся, що цей шлях правильний для вашої структури проекту
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// Моделі для автентифікації через NextAuth.js з PrismaAdapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Оновлена модель користувача для Badoo-прототипу
model User {
  id            String    @id @default(cuid())
  name          String? // Ім'я (з Google або введене користувачем)
  email         String?   @unique
  emailVerified DateTime?
  image         String? // URL основного фото профілю

  // --- Оновлені та нові поля для профілю ---
  birthDate DateTime? // Дата народження (для розрахунку віку)
  gender    String? // Стать (можна зробити Enum пізніше)
  aboutMe   String?   @db.Text // Коротко про себе (замість bio)
  city      String? // Місто проживання

  // Зв'язки для NextAuth
  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
