'use server';

import { auth } from '@/auth';
import prisma from '@/lib/prisma';
import { revalidatePath } from 'next/cache';
// –Ü–º–ø–æ—Ä—Ç createOrFindChatAndRedirect –≤–∏–¥–∞–ª–µ–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –≤—ñ–Ω –Ω–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è —Ç—É—Ç.
// –Ø–∫—â–æ –∑–Ω–∞–¥–æ–±–∏—Ç—å—Å—è —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è/—Å—Ç–≤–æ—Ä–µ–Ω–Ω—è ID —á–∞—Ç—É –±–µ–∑ redirect,
// —ó—ó –ø–æ—Ç—Ä—ñ–±–Ω–æ –±—É–¥–µ —Å—Ç–≤–æ—Ä–∏—Ç–∏/—ñ–º–ø–æ—Ä—Ç—É–≤–∞—Ç–∏ –æ–∫—Ä–µ–º–æ.

// –¢–∏–ø –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –≤—ñ–¥ togglePhotoLike
type ToggleLikeResponse = {
	success: boolean;
	isLiked?: boolean; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –Ω–æ–≤–∏–π —Å—Ç–∞–Ω –ª–∞–π–∫–∞
	isMatch?: boolean; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ, —á–∏ —Å—Ç–∞–≤—Å—è –º–µ—Ç—á
	chatId?: string; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ ID —á–∞—Ç—É, —è–∫—â–æ —Å—Ç–∞–≤—Å—è –º–µ—Ç—á
	error?: string;
	message?: string;
};

/**
 * –î–æ–¥–∞—î –∞–±–æ –≤–∏–¥–∞–ª—è—î –ª–∞–π–∫ –¥–ª—è –ø—Ä–æ—Ñ—ñ–ª—é/—Ñ–æ—Ç–æ —ñ–Ω—à–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞.
 * –Ø–∫—â–æ –≤–∏–Ω–∏–∫–∞—î –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ (–º–µ—Ç—á), —Å—Ç–≤–æ—Ä—é—î/–∑–Ω–∞—Ö–æ–¥–∏—Ç—å —á–∞—Ç
 * —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞—î —Å–∏—Å—Ç–µ–º–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ —Ü–µ–π —á–∞—Ç.
 * @param likedUserId ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —á–∏—î —Ñ–æ—Ç–æ/–ø—Ä–æ—Ñ—ñ–ª—å –ª–∞–π–∫–∞—é—Ç—å.
 */
export async function togglePhotoLike(
	likedUserId: string
): Promise<ToggleLikeResponse> {
	const session = await auth();

	if (!session?.user?.id) {
		return { success: false, error: 'Nicht autorisiert.' };
	}

	const likerId = session.user.id;

	if (likerId === likedUserId) {
		return { success: false, error: 'Sie k√∂nnen sich nicht selbst liken.' }; // –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –ª–∞–π–∫–Ω—É—Ç–∏ —Å–µ–±–µ
	}

	try {
		let isCurrentlyLiked = false;
		let matchOccurred = false;
		let newChatIdForMatch: string | undefined = undefined;

		// –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è –∞—Ç–æ–º–∞—Ä–Ω–æ—Å—Ç—ñ –æ–ø–µ—Ä–∞—Ü—ñ–π
		await prisma.$transaction(async (tx) => {
			// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –≤–∂–µ —Ç–∞–∫–∏–π –ª–∞–π–∫
			const existingLike = await tx.photoLike.findUnique({
				where: {
					likerId_likedUserId: {
						likerId,
						likedUserId,
					},
				},
			});

			if (existingLike) {
				// –Ø–∫—â–æ –ª–∞–π–∫ —ñ—Å–Ω—É—î, –≤–∏–¥–∞–ª—è—î–º–æ –π–æ–≥–æ
				await tx.photoLike.delete({
					where: {
						id: existingLike.id,
					},
				});
				isCurrentlyLiked = false;
				// console.log(`Like von ${likerId} f√ºr ${likedUserId} entfernt.`);
			} else {
				// –Ø–∫—â–æ –ª–∞–π–∫–∞ –Ω–µ–º–∞—î, —Å—Ç–≤–æ—Ä—é—î–º–æ –π–æ–≥–æ
				await tx.photoLike.create({
					data: {
						likerId,
						likedUserId,
					},
				});
				isCurrentlyLiked = true;
				// console.log(`Like von ${likerId} f√ºr ${likedUserId} hinzugef√ºgt.`);

				// –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –≤–∑–∞—î–º–Ω–∏–π –ª–∞–π–∫ (–º–µ—Ç—á)
				const mutualLike = await tx.photoLike.findUnique({
					where: {
						likerId_likedUserId: {
							likerId: likedUserId, // –¢–µ–ø–µ—Ä likedUser —î liker
							likedUserId: likerId, // –ê liker —î likedUser
						},
					},
				});

				if (mutualLike) {
					matchOccurred = true;
					console.log(`METCH zwischen ${likerId} und ${likedUserId}!`);

					let chat = await tx.chat.findFirst({
						where: {
							AND: [
								{ participants: { some: { userId: likerId } } },
								{ participants: { some: { userId: likedUserId } } },
								{
									participants: {
										every: { userId: { in: [likerId, likedUserId] } },
									},
								},
							],
						},
						select: { id: true },
					});

					if (!chat) {
						chat = await tx.chat.create({
							data: {
								participants: {
									create: [{ userId: likerId }, { userId: likedUserId }],
								},
							},
							select: { id: true },
						});
					}
					newChatIdForMatch = chat.id;

					const likerUser = await tx.user.findUnique({
						where: { id: likerId },
						select: { name: true },
					});
					// const likedUser = await tx.user.findUnique({ where: { id: likedUserId }, select: { name: true } }); // –¶–µ –≤–∂–µ —î, –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–≤–∞—Ç–∏ likerUser –¥–ª—è –¥—Ä—É–≥–æ–≥–æ —ñ–º–µ–Ω—ñ

					// –ó–º—ñ–Ω–Ω–∞ messageContentForLiker –≤–∏–¥–∞–ª–µ–Ω–∞, –æ—Å–∫—ñ–ª—å–∫–∏ messageContent –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è –¥–ª—è –æ–±–æ—Ö
					const messageContent = `üéâ Sie und ${
						likerUser?.name || 'jemand'
					} haben sich gegenseitig geliked! Starten Sie ein Gespr√§ch.`;

					if (newChatIdForMatch) {
						await tx.message.create({
							data: {
								chatId: newChatIdForMatch,
								content: messageContent,
								isSystemMessage: true,
							},
						});
						await tx.chat.update({
							where: { id: newChatIdForMatch },
							data: { updatedAt: new Date() },
						});
					}
				}
			}
		}); // –ö—ñ–Ω–µ—Ü—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó

		revalidatePath(`/users/${likedUserId}`);
		revalidatePath('/likes');
		if (matchOccurred && newChatIdForMatch) {
			revalidatePath(`/chat/${newChatIdForMatch}`);
			revalidatePath('/chat');
		}

		return {
			success: true,
			isLiked: isCurrentlyLiked,
			isMatch: matchOccurred,
			chatId: newChatIdForMatch,
			message: isCurrentlyLiked
				? matchOccurred
					? 'Es ist ein Match! Chat erstellt.'
					: 'Geliked!'
				: 'Like entfernt.',
		};
	} catch (error) {
		console.error('Fehler beim Umschalten des Likes:', error);
		const errorMessage =
			error instanceof Error ? error.message : 'Unbekannter Fehler.';
		return { success: false, error: `Fehler: ${errorMessage}` };
	}
}

export async function hasUserLiked(likedUserId: string): Promise<boolean> {
	const session = await auth();
	if (!session?.user?.id) {
		return false;
	}
	const likerId = session.user.id;

	if (likerId === likedUserId) {
		return false;
	}

	try {
		const like = await prisma.photoLike.findUnique({
			where: {
				likerId_likedUserId: {
					likerId,
					likedUserId,
				},
			},
		});
		return Boolean(like);
	} catch (error) {
		console.error('Fehler beim √úberpr√ºfen des Like-Status:', error);
		return false;
	}
}
